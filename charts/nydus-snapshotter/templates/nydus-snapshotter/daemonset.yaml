apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ template "nydus-snapshotter.fullname" . }}
  labels:
    {{- include "nydus-snapshotter.labels" . | nindent 4 }}
  {{- with .Values.daemonsetAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels:
      {{- include "nydus-snapshotter.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "nydus-snapshotter.labels" . | nindent 8 }}
      {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ include "nydus-snapshotter.serviceAccountName" . }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- with .Values.hostNetwork }}
      hostNetwork: true
      {{- end }}
      hostPID: {{ .Values.hostPid }}
      {{- if .Values.hostNetwork }}
      dnsPolicy: "ClusterFirstWithHostNet"
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
      {{- if quote .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if and (.Capabilities.APIVersions.Has "scheduling.k8s.io/v1beta1") (.Values.priorityClassName) }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- with .Values.image.pullSecrets | default .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.hostAliases }}
      hostAliases:
        {{- toYaml .Values.hostAliases | nindent 8 }}
      {{- end }}
      containers:
      - name: nydus-snapshotter
        image: {{ template "nydus-snapshotter.image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: ENABLE_CONFIG_FROM_VOLUME
          value: true
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        {{- if .Values.containerRuntime.containerd.enable }}
        lifecycle:
          postStart:
            exec:
              command:
              - "/bin/sh"
              - "-c"
              - |
                # currently, without host pid in container, we can not nsenter with pid and can not invoke systemctl correctly.
                nsenter -t 1 -m systemctl -- restart containerd.service

                # Wait for containerd to be fully up (adjust timeout as needed)
                timeout={{ .Values.init.containerd.restartTimeout }}
                while [ $timeout -gt 0 ]; do
                  if nsenter -t 1 -m systemctl is-active --quiet containerd.service; then
                    echo "containerd successfully restarted"
                    exit 0
                  fi
                  sleep 1
                  timeout=$((timeout - 1))
                done

                echo "Failed to restart containerd within the timeout period"
                exit 1
        {{- end }}
        command: ["/opt/nydus-artifacts/usr/local/bin/containerd-nydus-grpc"]
        args:
         - --config
         - /etc/nydus/config.toml
         - --log-to-stdout
         - --log-level
         - {{ .Values.logLevel }}
        volumeMounts:
        - name: config
          mountPath: "/etc/nydus/"
        - name: nydus-lib
          mountPath: "/var/lib/containerd/io.containerd.snapshotter.v1.nydus"
          mountPropagation: Bidirectional
        - name: nydus-run
          mountPath: "/run/containerd-nydus"
          mountPropagation: Bidirectional
      {{- if .Values.containerRuntime.containerd.enable }}
        - name: containerd-socket
          mountPath: /run/containerd/containerd.sock
      {{- end }}
      {{- with .Values.additionalVolumeMounts }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
        securityContext:
          privileged: true
      initContainers:
      {{- if .Values.containerRuntime.containerd.enable }}
      - name: update-containerd
        image: {{ template "nydus-snapshotter.initContainer.image" . }}
        imagePullPolicy: {{ .Values.containerRuntime.initContainer.image.pullPolicy }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        command:
        - /opt/nydus-artifacts/usr/local/bin/containerd-config-updater
        - -c
        - {{ .Values.containerRuntime.containerd.configFile | quote }}
        - -o
        - {{ .Values.containerRuntime.containerd.configFile | quote }}
        {{- if .Values.containerRuntime.containerd.runtimeHandlerName }}
        - -r
        - {{ .Values.containerRuntime.containerd.runtimeHandlerName | quote }}
        {{- end }}
        volumeMounts:
        - name: containerd-conf
          mountPath: {{ .Values.containerRuntime.containerd.configFile }}
      {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ template "nydus-snapshotter.fullname" . }}
      - name: nydus-run
        hostPath:
          path: /run/containerd-nydus
          type: DirectoryOrCreate
      - name: nydus-lib
        hostPath:
          path: /var/lib/containerd/io.containerd.snapshotter.v1.nydus
          type: DirectoryOrCreate
      {{- if .Values.containerRuntime.containerd.enable }}
      - name: containerd-conf
        hostPath:
          path: {{ .Values.containerRuntime.containerd.configFile }}
      - name: containerd-socket
        hostPath:
          path: /run/containerd/containerd.sock
          type: Socket
      {{- end }}
      {{- with .Values.additionalVolumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
